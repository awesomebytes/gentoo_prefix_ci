# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# Everything must be under a 'job' to be able to set the timeoutInMinutes
jobs:
  - job: "bootstrap_stage_1_and_2"
    timeoutInMinutes: 0

    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: gentoo_prefix_latest_image_initial

    steps:
    # We divide the boostrap in 3 parts to not go over the 6h limit as gcc takes ages
    - script: cd initial_bootstrap && docker build -f Dockerfile -t $(DockerHub_user)/$(docker_image_name) .
      displayName: 'docker build'
      # This means up to 6h
      timeoutInMinutes: 0
      # Even if it fails I want to push the image to DockerHub for inspection
      continueOnError: true
    # The variables are set on the Build options on the web interface
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'
    # # Try to tag the latest failed image we ran
    # - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
    #   displayName: 'create image to push to DockerHub'
    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name)
      displayName: 'push image to DockerHub'

    # - script: cd stage_3_1 && docker build -f Dockerfile -t gentoo_prefix_latest_image .
    #   displayName: 'docker build stage_3_1'
    #   # This means up to 6h
    #   timeoutInMinutes: 0
    #   # Even if it fails I want to push the image to DockerHub for inspection
    #   continueOnError: true
    # # Try to tag the latest failed image we ran
    # - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/gentoo_prefix_latest_image:$(Build.BuildId)-2
    #   displayName: 'create image to push to DockerHub'
    # # Push it
    # - script: docker push $(DockerHub_user)/gentoo_prefix_latest_image
    #   displayName: 'push image to DockerHub'
 

  - job: "bootstrap_stage_3_part_1"
    timeoutInMinutes: 0
    dependsOn: "bootstrap_stage_1_and_2"

    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: gentoo_prefix_latest_image_stage_3_1

    steps:
    # The variables are set on the Build options on the web interface
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'

    - script: cd stage_3_1 && docker build -f Dockerfile -t $(DockerHub_user)/$(docker_image_name) .
      displayName: 'docker build stage_3_1'
      # This means up to 6h
      timeoutInMinutes: 0
      # Even if it fails I want to push the image to DockerHub for inspection
      continueOnError: true
    # # Try to tag the latest failed image we ran
    # - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
    #   displayName: 'create image to push to DockerHub'
    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name)
      displayName: 'push image to DockerHub'


  - job: bootstrap_stage_3_part_2
    timeoutInMinutes: 0
    dependsOn: "bootstrap_stage_3_part_1"

    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: gentoo_prefix_latest_image_stage_3_2

    steps:
    # The variables are set on the Build options on the web interface
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'

    - script: cd stage_3_2 && docker build -f Dockerfile -t $(DockerHub_user)/$(docker_image_name) .
      displayName: 'docker build stage_3_2'
      # This means up to 6h
      timeoutInMinutes: 0
      # Even if it fails I want to push the image to DockerHub for inspection
      continueOnError: true
    # # Try to tag the latest failed image we ran
    # - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
    #   displayName: 'create image to push to DockerHub'
    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name)
      displayName: 'push image to DockerHub'
